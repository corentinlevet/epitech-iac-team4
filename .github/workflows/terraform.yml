# Multi-Environment GitOps Workflow - C3.md Implementation
# Implements all C3.md requirements: validation, planning, versioning, deployment

name: "Terraform Multi-Environment CI/CD"

on:
  push:
    branches: ["main"]
    paths:
      - "terraform/environments/**"
      - "terraform/modules/**"
  pull_request:
    branches: ["main"]
    paths:
      - "terraform/environments/**"
      - "terraform/modules/**"
  release:
    types: [published]

# Security: Use OIDC for AWS credentials (best practice)
permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-validate:
    name: "Terraform Validation"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          
      # C3.md requirement: "Validate your terraform files: syntax must be valid and correctly indented"
      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive
        
      - name: Terraform Validate - Environments
        working-directory: ./terraform/environments
        run: |
          terraform init -backend=false
          terraform validate
        
      - name: Terraform Validate - VPC Module
        working-directory: ./terraform/modules/vpc
        run: |
          terraform init -backend=false
          terraform validate

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: [dev, prod]
        
    defaults:
      run:
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ matrix.environment == 'dev' && 'us-east-1' || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -backend-config="../backends/${{ matrix.environment }}.config"

      # C3.md requirement: "Run terraform plan for both environments (dev + prd)"
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="${{ matrix.environment }}.tfvars" -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request - ${{ matrix.environment }}
        uses: actions/github-script@v7
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan for ${{ matrix.environment }} Environment üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Environment: ${{ matrix.environment }}*  
            *Triggered by: @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-deploy-dev:
    name: "Deploy to Development"
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    defaults:
      run:
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -backend-config="../backends/dev.config"

      - name: Terraform Plan
        run: terraform plan -var-file="dev.tfvars" -input=false

      # C3.md requirement: "Apply changes in dev"
      - name: Terraform Apply
        run: terraform apply -var-file="dev.tfvars" -auto-approve -input=false

      - name: Terraform Output
        run: terraform output

  terraform-deploy-prod:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: terraform-validate
    # C3.md requirement: "Versioning & release (e.g., tagging: v1.0.0); then: Apply changes in prd"
    if: github.event_name == 'release' && github.event.action == 'published'
    
    defaults:
      run:
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -backend-config="../backends/prod.config"

      - name: Terraform Plan
        run: terraform plan -var-file="prod.tfvars" -input=false

      # C3.md requirement: "Apply changes in prd"
      - name: Terraform Apply
        run: terraform apply -var-file="prod.tfvars" -auto-approve -input=false

      - name: Terraform Output
        run: terraform output

      - name: Create Deployment Summary
        run: |
          echo "## Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** us-west-2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Infrastructure Outputs:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Development Environment Pipeline (PR)
  development:
    name: 'Terraform Development'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment: development
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="../backends/dev.config"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file="dev.tfvars" -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: dev
    needs: terraform-check

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -backend-config="../backends/dev.config"

      - name: Terraform Apply
        run: terraform apply -var-file="dev.tfvars" -auto-approve -input=false

  terraform-production:
    name: "Terraform Production Deploy"
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init -backend-config="../backends/prod.config"

      - name: Terraform Plan
        run: terraform plan -var-file="prod.tfvars" -input=false

      - name: Terraform Apply
        run: terraform apply -var-file="prod.tfvars" -auto-approve -input=false
